{"ast":null,"code":"var _jsxFileName = \"/Users/oz/Desktop/portfoliop/src/WorkExperience.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkExperience = () => {\n  const styles = {\n    container: {\n      padding: '150px',\n      fontSize: '19px',\n      lineHeight: '1.5',\n      textAlign: 'center'\n    },\n    heading: {\n      fontSize: '36px',\n      marginBottom: '30px'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.heading,\n      children: \"Work Experience\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"As a freelance developer, I have worked on a variety of projects using different technologies, including React, Node.js, PHP, TypeScript, and Spring Boot. One of the projects that stands out to me is a customer service application I built using Spring Boot and the MVC architecture.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"For this project, I created a RESTful API using Spring Boot that allowed customers to submit support requests and customer service representatives to manage and respond to those requests. The application was designed using the MVC architecture, which helped to keep the code organized and maintainable.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"One of the challenges of this project was ensuring that the application was secure, as it dealt with sensitive customer data. To achieve this, I implemented authentication and authorization using Spring Security and JWT tokens. This ensured that only authorized users could access sensitive data or perform certain actions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Another key feature of the application was its integration with a MongoDB database. This allowed customer service representatives to view and manage customer support requests in real-time. To ensure that the application was scalable, I designed the database schema to allow for efficient querying and indexing.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_c = WorkExperience;\nvar _c;\n$RefreshReg$(_c, \"WorkExperience\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","WorkExperience","styles","container","padding","fontSize","lineHeight","textAlign","heading","marginBottom","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/oz/Desktop/portfoliop/src/WorkExperience.js"],"sourcesContent":["import React from \"react\";\n\nexport const WorkExperience = ()=>{\n\n    const styles = {\n        container: {\n            padding: '150px',\n            fontSize: '19px',\n            lineHeight: '1.5',\n            textAlign: 'center',\n        },\n        heading: {\n            fontSize: '36px',\n            marginBottom: '30px',\n        },\n    };\n    return (\n        <div style={styles.container}>\n            <h2 style={styles.heading}>Work Experience</h2>\n            <p>As a freelance developer, I have worked on a variety of projects using different technologies, including React, Node.js, PHP, TypeScript, and Spring Boot. One of the projects that stands out to me is a customer service application I built using Spring Boot and the MVC architecture.</p>\n            <p>For this project, I created a RESTful API using Spring Boot that allowed customers to submit support requests and customer service representatives to manage and respond to those requests. The application was designed using the MVC architecture, which helped to keep the code organized and maintainable.</p>\n            <p>One of the challenges of this project was ensuring that the application was secure, as it dealt with sensitive customer data. To achieve this, I implemented authentication and authorization using Spring Security and JWT tokens. This ensured that only authorized users could access sensitive data or perform certain actions.</p>\n            <p>Another key feature of the application was its integration with a MongoDB database. This allowed customer service representatives to view and manage customer support requests in real-time. To ensure that the application was scalable, I designed the database schema to allow for efficient querying and indexing.</p>\n            \n\n\n        </div>\n    );\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAI;EAE9B,MAAMC,MAAM,GAAG;IACXC,SAAS,EAAE;MACPC,OAAO,EAAE,OAAO;MAChBC,QAAQ,EAAE,MAAM;MAChBC,UAAU,EAAE,KAAK;MACjBC,SAAS,EAAE;IACf,CAAC;IACDC,OAAO,EAAE;MACLH,QAAQ,EAAE,MAAM;MAChBI,YAAY,EAAE;IAClB;EACJ,CAAC;EACD,oBACIT,OAAA;IAAKU,KAAK,EAAER,MAAM,CAACC,SAAU;IAAAQ,QAAA,gBACzBX,OAAA;MAAIU,KAAK,EAAER,MAAM,CAACM,OAAQ;MAAAG,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC/Cf,OAAA;MAAAW,QAAA,EAAG;IAA0R;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACjSf,OAAA;MAAAW,QAAA,EAAG;IAA8S;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACrTf,OAAA;MAAAW,QAAA,EAAG;IAAmU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAC1Uf,OAAA;MAAAW,QAAA,EAAG;IAAsT;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAI3T;AAEd,CAAC;AAAAC,EAAA,GA1BYf,cAAc;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}